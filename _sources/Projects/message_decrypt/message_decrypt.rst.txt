
Message decryption
==================

.. rubric:: (due: Wednesday, Dec 2, 9:00 AM)


Message encryption is necessary to ensure safe transmission of data.


Messages can be encrypted by changing the order of the characters in the message.


Consider the example: 'Luke, I am your father'

The encryption is done following these steps:

-  An integer number **c** is chosen at random. (say c=3)

-  The message is then written in a **n x c  array** (extra characters '&' might be needed if the string is too short). The dimension **n** is determined by the length of the string and the value of **c**. So the corresponding array for our message looks like this:

+---+---+---+
| L | u | k |
+---+---+---+
| e | , |   |
+---+---+---+
| I |   | a |
+---+---+---+
| m |   | y |
+---+---+---+
| o | u | r |
+---+---+---+
|   | f | a |
+---+---+---+
| t | h | e |
+---+---+---+
| r | & | & |
+---+---+---+

-  The encrypted message is obtained from the transpose array (after removing the extra characters '&'):

+---+---+---+---+---+---+---+---+
| L | e | I | m | o |   | t | r |
+---+---+---+---+---+---+---+---+
| u | , |   |   | u | f | h | & |
+---+---+---+---+---+---+---+---+
| k |   | a | y | r | a | e | & |
+---+---+---+---+---+---+---+---+

**Encrypted message**: 'LeImo tru,  ufhk ayrae'

Project
-------

Each file listed below contains text (a fragment of a book in English)
encrypted using the method described above choosing **c** at random in the [25,100] interval. 

Write a function **decrypt('txtfile')** that decrypts the file corresponding to your UB Person Number modulo
30 and print the decrypted message. The function should take as a variable the name of your .txt file.

A dictionary of English words is available here :download:`dictionary<dictionary.txt>`


**Note.**  This is a programming project. Your project report does not need
include narrative, beyond comments explaining how your code works. The project will
be graded according to the following rubrics:

* Code that successfully decrypts the text file: 70%
* Report organization and code documentation: 30%

0.  :download:`aswani.txt<aswani.txt>`
1.  :download:`bas.txt<bas.txt>`
2.  :download:`burlee.txt<burlee.txt>`
3.  :download:`chen.txt<chen.txt>`
4.  :download:`chu.txt<chu.txt>`
5.  :download:`diduro.txt<diduro.txt>`
6.  :download:`elkirami.txt<elkirami.txt>`
7.  :download:`fu.txt<fu.txt>`
8.  :download:`fuller.txt<fuller.txt>`
9.  :download:`hattala.txt<hattala.txt>`
10. :download:`hernandez.txt<hernandez.txt>`
11. :download:`huang.txt<huang.txt>`
12. :download:`king.txt<king.txt>`
13. :download:`lang.txt<lang.txt>`
14. :download:`lee.txt<lee.txt>`
15. :download:`liu.txt<liu.txt>`
16. :download:`lyu.txt<lyu.txt>`
17. :download:`mages.txt<mages.txt>`
18. :download:`mcelduff.txt<mcelduff.txt>`
19. :download:`mcnally.txt<mcnally.txt>`
20. :download:`munmun.txt<munmun.txt>`
21. :download:`orecki.txt<orecki.txt>`
22. :download:`parnagian.txt<parnagian.txt>`
23. :download:`percy.txt<percy.txt>`
24. :download:`tai.txt<tai.txt>`
25. :download:`wolf.txt<wolf.txt>`
26. :download:`xu.txt<xu.txt>`
27. :download:`zehler.txt<zehler.txt>`
28. :download:`zhang.txt<zhang.txt>`
29. :download:`zubairi.txt<zubairi.txt>`
